---
description: Common rules
alwaysApply: true
---

# Project Standards & Best Practices

## Docs

- For any documentation we use Docosaurus in docs-site dir.
- **Never duplicate model definitions in guide pages** - model definitions belong only in `docs-site/docs/api-reference/` under "Models & Interfaces" section
- Guide pages (like tasks.md, documents.md, etc.) should focus on usage examples and link to api-reference for model definitions
- **Keep documentation in sync with code changes**:
  - When adding new API methods, update both the guide page (usage examples) and api-reference page (API reference)
  - When adding new models, add them to api-reference under "Models & Interfaces"
  - When adding new examples, list them in patterns/ready-to-run.md under "Ready-to-Run Examples"
  - Always verify documentation builds successfully after changes: `npm run build`

### When Adding New API Endpoints

Follow this checklist to ensure completeness:

1. **Code Implementation:**
   - [ ] Create models in `vaiz/models/` (Request, Response, main model)
   - [ ] Create API client in `vaiz/api/` with methods
   - [ ] Add API client to `VaizClient` in `vaiz/client.py`
   - [ ] Export models in `vaiz/models/__init__.py`
   - [ ] Export API client in `vaiz/api/__init__.py`

2. **Examples & Tests:**
   - [ ] Create example in `examples/` demonstrating usage
   - [ ] Create comprehensive test in `tests/`
   - [ ] Run all tests to ensure nothing broke: `pytest tests/`

3. **Documentation:**
   - [ ] Create guide page in `docs-site/docs/guides/` with usage examples
   - [ ] Create API reference page in `docs-site/docs/api-reference/` with technical specs
   - [ ] Add both pages to `docs-site/sidebars.ts` in appropriate sections
   - [ ] Update `docs-site/docs/api-reference/overview.md` with new section link
   - [ ] Add example to `docs-site/docs/patterns/ready-to-run.md`
   - [ ] If adding enums, document them in `docs-site/docs/api-reference/enums.md`
   - [ ] Verify build: `npm run build` in docs-site/

4. **Naming Conventions:**
   - [ ] Use enum names matching TypeScript API (e.g., `AvatarMode`, not `EAvatarMode`)
   - [ ] Use existing enums instead of primitive types where applicable (e.g., `AvatarMode` instead of `int`)

## Changelog

**Keep CHANGELOG.md user-focused and concise:**

### ‚úÖ Include:
- New API methods and endpoints
- Breaking changes with migration instructions
- Important bug fixes
- Changed behavior that affects users

### ‚ùå Exclude:
- Documentation updates
- Test additions/changes
- Example code additions
- Internal refactoring
- CI/CD changes
- Development tools updates

### Format:
```markdown
## [X.Y.Z] - YYYY-MM-DD

### Added
- New API methods (what users can do)

### Changed
- Breaking changes with migration path
- Significant behavior changes

### Fixed
- Important bug fixes
```

**Example:**
```markdown
## [0.8.0] - 2025-10-21

### Added
- **üè¢ Spaces API**: New `get_space(space_id)` method
- **üë• Members API**: New `get_space_members()` method

### Changed
- **üîß Breaking**: Renamed `EAvatarMode` ‚Üí `AvatarMode`
  - Migration: Update imports
```

## Comments

- Write code, comments & docs, in English only, even if the user communicates in another language.

## Dependencies

- Add new dependencies only if absolutely necessary. Always ask user about adding any packages.

## Pull Requests & Commits

- Write clear, descriptive commit messages in English. Each pull request should contain only related changes and be reviewed by at least one team member.

## Sensitive Data

- Never commit secrets, passwords, or API keys to the repository. Use environment variables and `.env` files, and ensure they are listed in `.gitignore`.

## Python

- Always activate venv before run scripts!

### DRY Checklist

Before committing code, ask:
- [ ] Does similar functionality exist elsewhere?
- [ ] Can this logic be extracted to a hook?
- [ ] Can this UI be extracted to a component?
- [ ] Am I copying code from another file?
- [ ] Will this pattern be used again?

If you answer "yes" to any question, refactor before proceeding.